import pandas as pd
import xlsxwriter
import os



###### SET VARIABLES ######
# provide RPUID list for checking
rpuidList = []

# Provide a path to the database connection file
wksp = r''


# Provide destination file path containing results
outfile = r'.xlsx'



# empty lists for results
rpuidFound = []
rpuid2Found = []
rpuidMissing = []

# empty DataFrame for results
df = pd.DataFrame(columns=['objectid','rpuid', 'REALPROPERTYUNIQUEIDENTIFIER', 'srcFeatureClass', 'srcFeatureDataset'])

# added alias because it had been found in previously exported GIS tables
fields1 = ['objectid','rpuid']
fields2 = ['objectid','REALPROPERTYUNIQUEIDENTIFIER']

datasetWildcard = ''  ##enter feature dataset to limit search to
featureClassWildcard = ''  ##enter feature class to limit search to

arcpy.env.workspace = wksp
db = str(wksp).split('\\')[-1]
# print("Scanning {} for following RPUIDs:".format(str(db)))


    
for fds in arcpy.ListDatasets(datasetWildcard + "*"):
    print("-----------------" + fds + "-----------------")
    for fc in arcpy.ListFeatureClasses("*" + featureClassWildcard + "*","",fds):
        # catch for feature classes not containing the 'rpuid' field
        lstfields = arcpy.ListFields(fc)
        for f in lstfields:
            # if 'rpuid' field exists in scanning source
            if f.name == fields1[1]:
                with arcpy.da.SearchCursor(fc,fields1) as cursor:
                    for row in cursor:
                        # if row value matches value in list:
                        if row[1] in rpuidList:
                            print(fc + "," + str(row[0]) + "," + str(row[1]))
                            # write line to outfile - dict structure:
                            data = [{
                                'rpuid':row[1],
                                'srcFeatureClass':fc,
                                'srcFeatureDataset':fds,
                                'objectid':row[0],
                            }]
                            # convert dict to DataFrame
                            tempdf = pd.DataFrame.from_dict(data)
                            # print(tempdf)
                            df = pd.concat([df, tempdf], ignore_index=True)
                            rpuidFound.append(row[1])
            # if 'REALPROPERTYUNIQUEIDENTIFIER' field exists in scanning source save in rpuid2Found
            if f.name == fields2[1]:
                with arcpy.da.SearchCursor(fc,fields2) as cursor:
                    for row in cursor:
                        # if row value matches value in list:
                        if row[2] in rpuidList:
                            print(fc + "," + str(row[0]) + "," + str(row[1]))
                            # write variables for outfile:
                            data = [{
                                'REALPROPERTYUNIQUEIDENTIFIER':row[1],
                                'srcFeatureClass':fc,
                                'srcFeatureDataset':fds,
                                'objectid':row[0],
                            }]
                            tempdf = pd.DataFrame.from_dict(data)
                            # print(tempdf)
                            df = pd.concat([df, tempdf], ignore_index=True)
                            rpuid2Found.append(row[1])
					
# # print("==================RPUIDS NOT FOUND=======================")
# capture non-matched values in list
for rpuid in rpuidList:
    if (rpuid not in rpuidFound) & (rpuid not in rpuid2Found):
        rpuidMissing.append(rpuid)


# provides aggregated results - objectid count by feature class/dataset
grouped = df.groupby(['srcFeatureDataset', 'srcFeatureClass']).count('objectid').reset_index()
grouped.sort_values(['objectid'], ascending=False)
grouped = grouped.rename(columns={'objectid': 'objectidSUM'})

# second DataFrame reports values not found in target database
df2 = pd.DataFrame(data=rpuidMissing)

# write multiple sheets to same xlsx file
writer = pd.ExcelWriter(outfile, engine='xlsxwriter')

with pd.ExcelWriter(outfile) as writer:
    df.to_excel(writer, sheet_name="FoundRPUIDs", index=False)
    df2.to_excel(writer, sheet_name="MissingRPUIDs", index=False)
    grouped.to_excel(writer, sheet_name="RPUIDsByFC", index=False)
    # formatting options var:
    workbook  = writer.book
    worksheet = writer.sheets['FoundRPUIDs']
    # autofit content for pleasant opening exp. 
    worksheet.autofit()
    # freeze top row (headers)
    worksheet.freeze_panes(1, 0)
    # write properties to file
    workbook.set_properties(
        {
            "title": "",
            "subject": "",
            "author": "Peter Bordokoff",
            "manager": "",
            "company": "",
            "category": "",
            "keywords": "",
            "comments": "Generated by python script",
            "status": "",
        }
    )
